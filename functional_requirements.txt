5. Functional Requirements 
(Details expanded from previous discussions) 
//5.1 User Management & Authentication 
//5.1.1 Secure registration process (Email/Phone + Password). 
//5.1.2 Role selection (Farmer, Buyer, Logistics). 
//5.1.3 OTP verification (SMS/Email). 
//5.1.4 KYC/KYB process (ID upload, Business Reg docs, farm location pinning/verification). 
//Admin approval workflow. 
//5.1.5 User profile creation and editing (contact details, address, bank info, business info, profile 
//picture). 
//5.1.6 Password reset functionality. 
//5.1.7 User rating and review submission and display. 
//5.1.8 User account suspension/deactivation (Admin). 
//5.1.9 Role-based access control. 



5.2 Product Listing & Catalog 
//5.2.1 Farmer ability to create new listings (Crop type, variety, grade options, quantity available, 
//unit of measure [kg, tonne, local units with conversion], price/price range, location, available date 
//range). 
//5.2.2 Ability to upload multiple photos and short video per listing. 
//5.2.3 Inventory tracking (decrement quantity upon successful order). 
//5.2.4 Ability to edit, pause, or delete active listings. 
//5.2.5 Admin ability to manage crop categories, varieties, grades, and units. 


5.3 Search & Discovery 
5.3.1 Buyer keyword search (crop, variety). 
5.3.2 Filtering by location, grade, quantity range, price range, farmer rating, availability date. 
5.3.3 Sorting options (price, distance, rating, newly listed). 
5.3.4 Saved searches and alerts for buyers. 


5.4 Ordering & Negotiation 
//5.4.1 Buyer ability to add items to cart or place direct order. 
//5.4.2 Option for buyer to make an offer if farmer set a price range (negotiation workflow via 
//messaging/structured offers). 
5.4.3 Order summary review before confirmation (incl. estimated fees). 
5.4.4 Order confirmation notifications to buyer and farmer. 
5.4.5 Order history tracking for both parties. 
5.4.6 Ability to handle minimum order quantities set by farmers. 
5.4.7 Functionality for scheduling recurring orders (basic version).



5.5 Logistics Management 
5.5.1 Farmer indicates preferred logistics option (Self-deliver, Needs Pickup). 
5.5.2 Buyer selects logistics preference during checkout (Platform Partner, Arrange Own Pickup, 
Accept Farmer Delivery). 
5.5.3 If Platform Partner: Admin assigns order to vetted Logistics Partner; Partner 
accepts/rejects; Status updates (Picked Up, In Transit, Delivered). Basic GPS tracking if partner 
API allows. 
5.5.4 Clear communication channel for coordination if Buyer/Farmer arranges logistics. 
5.5.5 Proof of Delivery mechanism (e.g., confirmation code, photo upload). 



5.6 Quality Assurance & Disputes 
5.6.1 Standard QA relies on farmer listing accuracy (photos, grade) and buyer confirmation upon 
receipt within a set timeframe (e.g., 24 hours). 
5.6.2 Buyer ability to raise a dispute (quality, quantity discrepancy) with evidence (photos) within 
the timeframe. 
5.6.3 Admin-mediated dispute resolution workflow. 
5.6.4 Option for buyers to request Premium QA (paid service, requires agent verification at 
aggregation/pickup - future enhancement detail TBD). 



5.7 Payment Processing 
5.7.1 Integration with secure Payment Gateway(s) (e.g., Paystack, Flutterwave). 
5.7.2 Buyer payment options: Card, Bank Transfer, USSD, Wallet (platform wallet system). 
5.7.3 Escrow functionality: Hold buyer payment until delivery confirmation/dispute resolution. 
5.7.4 Automated calculation and deduction of platform commission and fees. 
5.7.5 Secure and timely payout process to Farmer's registered bank account/wallet. 
5.7.6 Transaction history and statement generation for users and admin.
- Support multiple Paystack channels (USSD, bank transfer, saved cards).
- Platform Wallet: users can top up, view balance, and pay via wallet.
- Admin export: CSV download of filtered transactions & orders.
- Webhook retries (up to 3) and enhanced error logging.
- Dispute resolution triggers refund and updates order status to REFUNDED.



5.8 Communication & Notifications 
5.8.1 In-app messaging between Buyer and Farmer regarding specific orders. 
//5.8.2 Automated system notifications (SMS/Email/Push) for: Order confirmation, Payment 
success/failure, Logistics updates, Payout confirmation, New messages, Dispute updates. 
//5.8.3 Broadcast notification capability for Admins (e.g., maintenance alerts). 



5.9 AI & Transparency Features 
5.9.1 Display real-time, anonymized price benchmark ranges for relevant produce/location within 
listing/search results. 
5.9.2 Display clear, itemized fee calculation before order confirmation. 
5.9.3 AI Matchmaking: Proactively suggest relevant listings to buyers and potential buyers to 
farmers based on history and preferences. 
5.9.4 AI Demand Snippets: Display indicative, aggregated demand trends/forecasts on farmer 
dashboard. 
5.9.5 AI Chatbot: Handle Tier 1 FAQs via web/app interface.



5.10 Accessibility & Localization 
5.10.1 Mobile Apps (iOS/Android) with offline data caching and sync for key functions. 
5.10.2 Responsive Web design for desktop/mobile browsers. 
5.10.3 Multi-lingual interface (English + Hausa/Yoruba/Igbo - select 1-2 initially). 
5.10.4 Support for standard (kg, tonne) and common local units (with visual 
representation/conversion).



5.11 Administration Panel 
5.11.1 Secure admin login. 
5.11.2 Dashboard with key platform metrics. 
5.11.3 User management (view, verify, suspend, manage roles). 
5.11.4 Listing management (view, approve/reject flags, manage categories). 
5.11.5 Order management (view all orders, track status, intervene if necessary). 
5.11.6 Dispute management interface. 
5.11.7 Payment and Payout monitoring and management. 
5.11.8 Logistics partner management. 
5.11.9 Content management (FAQs, announcements). 
5.11.10 Reporting and Analytics access. 




Here’s a quick breakdown:

1. Endpoints & When to Use  
- POST /api/product-listings (createListing)  
  • Farmer uploads photos/videos and details → new listing goes live.  
- GET /api/product-listings & GET /api/product-listings/:id  
  • Buyer browses available listings.  

- POST /api/orders/direct/:buyerId (placeDirectOrder)  
  • Buyer skips negotiation, instantly places a one‐off order against a listing.  
  • Enforces min-order, inventory decrement, transaction record, notifications, email.  

- POST /api/orders/order (placeOrder)  
  • Buyer places order after an agreed negotiation. Usually called once session.status="ACCEPTED".  
  • Similar to direct but tied to req.user, you might carry over negotiated terms.  

- Negotiation flow:  
  • POST /api/orders/:orderId/negotiate → open a session.  
  • POST /api/orders/:orderId/negotiate/msg → exchange messages.  
  • PUT /api/orders/:orderId/negotiate → update session to ACCEPTED/REJECTED.  

- GET /api/orders/summary/:orderId  
  • Preview order details (items, pricing, parties) before payment.  

- GET /api/orders/history/buyer/:buyerId & /history/farmer/:farmerId  
  • Fetch past orders for each role.  

2. End-to-End Flow  
A. Farmer Creates a Listing  
  1. Authenticate as FARMER (JWT → auth middleware).  
  2. POST /api/product-listings with fields + up to 10 photos & 5 videos.  
  3. Server stores record, emits socket “listingCreated.”  

B. Buyer Browses & Initiates an Order  
  1. Authenticate as BUYER.  
  2. GET /api/product-listings → view all or GET /api/product-listings/:id.  
  3. If they want to negotiate:  
     • POST /api/orders/:listingId/negotiate → create negotiationSession.  
     • POST /api/orders/:listingId/negotiate/msg {senderId,msg}.  
     • Buyer & farmer exchange until one does PUT /api/orders/:listingId/negotiate {status:"ACCEPTED"}.  

C. Placing the Final Order  
  – After ACCEPTED negotiation:  
     • Buyer calls POST /api/orders/order {productId,quantityOrdered,…}.  
  – Or skip negotiation entirely with POST /api/orders/direct/:buyerId.  

D. Post-Order Processing  
  1. Inventory decremented.  
  2. Transaction record (PENDING payment).  
  3. Notification + email sent to farmer.  
  4. Buyer/ farmer can view on GET /api/orders/history/…  
  5. Payment integration and status updates can be layered on top.  

This covers how placeDirectOrder (no back-and-forth) vs. placeOrder (post-negotiation) differ, and which HTTP calls fire at each business step.